{"ast":null,"code":"var _jsxFileName = \"/home/ajuri/react-app/AprendiendoReact/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport React, { useEffect, useState } from 'react';\nimport { TaskRow } from './components/TaskRows';\nimport { TaskBanner } from './components/TaskBanner';\nimport { TaskCreator } from './components/TaskCreator';\nimport { VisibilityControl } from './components/VisibilityControl';\nimport { DeleteData } from './components/DeleteData';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [userName, setUserName] = useState('Ale');\n  const [taskItems, setTaskItems] = useState([{\n    name: '',\n    completed: true\n  }]);\n  const [showCompleted, setShowCompleted] = useState(true);\n  useEffect(() => {\n    let data = localStorage.getItem(\"tasks\");\n\n    if (data != null) {\n      setTaskItems(JSON.parse(data));\n    } else {\n      setTaskItems([{}]);\n      setShowCompleted(true);\n    }\n  }, []);\n  useEffect(() => {\n    localStorage.setItem('tasks', JSON.stringify(taskItems));\n  }, [taskItems]);\n\n  const createNewTask = taskName => {\n    if (!taskItems.find(t => t.name === taskName)) {\n      setTaskItems([...taskItems, {\n        name: taskName,\n        completed: false\n      }]);\n    }\n  };\n\n  const toggleTask = task => setTaskItems(taskItems.map(t => t.name === task.name ? { ...t,\n    completed: !t.completed\n  } : t));\n\n  const taskTableRows = completedValue => taskItems.filter(task => task.completed === completedValue).map(task => /*#__PURE__*/_jsxDEV(TaskRow, {\n    task: task,\n    toggleTask: toggleTask\n  }, task.name, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 9\n  }, this));\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-main\",\n    children: [/*#__PURE__*/_jsxDEV(TaskCreator, {\n      callback: createNewTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(TaskBanner, {\n        taskItems: taskItems\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"app-main\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              className: \"DescriptionRow\",\n              children: \"Tareas\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              className: \"HechoRow\",\n              children: \"Estado\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: taskTableRows(false)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"app-main\",\n        children: /*#__PURE__*/_jsxDEV(VisibilityControl, {\n          description: \"Tareas Completas\",\n          isChecked: showCompleted,\n          callback: checked => setShowCompleted(checked)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), showCompleted && /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"app-main\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              className: \"DescriptionRow\",\n              children: \"Tareas\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 97,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              className: \"HechoRow\",\n              children: \"Hecho\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: taskTableRows(true)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(DeleteData, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"um0n71haX2YNYsAYb4b0/Fz/Jpo=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/ajuri/react-app/AprendiendoReact/src/App.js"],"names":["React","useEffect","useState","TaskRow","TaskBanner","TaskCreator","VisibilityControl","DeleteData","App","userName","setUserName","taskItems","setTaskItems","name","completed","showCompleted","setShowCompleted","data","localStorage","getItem","JSON","parse","setItem","stringify","createNewTask","taskName","find","t","toggleTask","task","map","taskTableRows","completedValue","filter","checked"],"mappings":";;;AACA,OAAO,WAAP;AACA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,OAAT,QAAwB,uBAAxB;AACA,SAASC,UAAT,QAA2B,yBAA3B;AACA,SAASC,WAAT,QAA4B,0BAA5B;AACA,SAASC,iBAAT,QAAkC,gCAAlC;AACA,SAASC,UAAT,QAA2B,yBAA3B;;;AAGA,SAASC,GAAT,GAAe;AAAA;;AAEb,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BR,QAAQ,CAAC,KAAD,CAAxC;AAEA,QAAM,CAACS,SAAD,EAAYC,YAAZ,IAA4BV,QAAQ,CAAC,CACzC;AAAEW,IAAAA,IAAI,EAAE,EAAR;AAAYC,IAAAA,SAAS,EAAE;AAAvB,GADyC,CAAD,CAA1C;AAIA,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCd,QAAQ,CAAC,IAAD,CAAlD;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIgB,IAAI,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAX;;AACA,QAAIF,IAAI,IAAI,IAAZ,EAAkB;AAChBL,MAAAA,YAAY,CAACQ,IAAI,CAACC,KAAL,CAAWJ,IAAX,CAAD,CAAZ;AACD,KAFD,MAEO;AACLL,MAAAA,YAAY,CAAC,CAAC,EAAD,CAAD,CAAZ;AACAI,MAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACD;AACF,GARQ,EAQN,EARM,CAAT;AAUAf,EAAAA,SAAS,CAAC,MAAM;AACdiB,IAAAA,YAAY,CAACI,OAAb,CAAqB,OAArB,EAA8BF,IAAI,CAACG,SAAL,CAAeZ,SAAf,CAA9B;AACD,GAFQ,EAEN,CAACA,SAAD,CAFM,CAAT;;AASA,QAAMa,aAAa,GAAGC,QAAQ,IAAI;AAChC,QAAI,CAACd,SAAS,CAACe,IAAV,CAAeC,CAAC,IAAIA,CAAC,CAACd,IAAF,KAAWY,QAA/B,CAAL,EAA+C;AAC7Cb,MAAAA,YAAY,CAAC,CAAC,GAAGD,SAAJ,EAAe;AAAEE,QAAAA,IAAI,EAAEY,QAAR;AAAkBX,QAAAA,SAAS,EAAE;AAA7B,OAAf,CAAD,CAAZ;AACD;AACF,GAJD;;AAMA,QAAMc,UAAU,GAAGC,IAAI,IACrBjB,YAAY,CAACD,SAAS,CAACmB,GAAV,CAAcH,CAAC,IAAKA,CAAC,CAACd,IAAF,KAAWgB,IAAI,CAAChB,IAAhB,GAAuB,EAAE,GAAGc,CAAL;AAAQb,IAAAA,SAAS,EAAE,CAACa,CAAC,CAACb;AAAtB,GAAvB,GAA2Da,CAA/E,CAAD,CADd;;AAGA,QAAMI,aAAa,GAAIC,cAAD,IACpBrB,SAAS,CACNsB,MADH,CACUJ,IAAI,IAAIA,IAAI,CAACf,SAAL,KAAmBkB,cADrC,EAEGF,GAFH,CAEOD,IAAI,iBAGP,QAAC,OAAD;AACE,IAAA,IAAI,EAAEA,IADR;AAGE,IAAA,UAAU,EAAED;AAHd,KAEOC,IAAI,CAAChB,IAFZ;AAAA;AAAA;AAAA;AAAA,UALJ,CADF;;AAcA,sBACE;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA,4BAEE,QAAC,WAAD;AAAa,MAAA,QAAQ,EAAEW;AAAvB;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE;AAAA,8BACE,QAAC,UAAD;AAAY,QAAA,SAAS,EAAEb;AAAvB;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAO,QAAA,SAAS,EAAC,UAAjB;AAAA,gCACE;AAAA,iCACE;AAAA,oCACE;AAAI,cAAA,SAAS,EAAC,gBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,eAEE;AAAI,cAAA,SAAS,EAAC,UAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBADF,eAOE;AAAA,oBACGoB,aAAa,CAAC,KAAD;AADhB;AAAA;AAAA;AAAA;AAAA,gBAPF;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,eAkBE;AAAK,QAAA,SAAS,EAAC,UAAf;AAAA,+BACE,QAAC,iBAAD;AACE,UAAA,WAAW,EAAC,kBADd;AAEE,UAAA,SAAS,EAAEhB,aAFb;AAGE,UAAA,QAAQ,EAAEmB,OAAO,IAAIlB,gBAAgB,CAACkB,OAAD;AAHvC;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAlBF,EA0BInB,aAAa,iBACX;AAAO,QAAA,SAAS,EAAC,UAAjB;AAAA,gCACE;AAAA,iCACE;AAAA,oCACE;AAAI,cAAA,SAAS,EAAC,gBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,eAEE;AAAI,cAAA,SAAS,EAAC,UAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBADF,eAOE;AAAA,oBACGgB,aAAa,CAAC,IAAD;AADhB;AAAA;AAAA;AAAA;AAAA,gBAPF;AAAA;AAAA;AAAA;AAAA;AAAA,cA3BN,eA0CE,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA,cA1CF;AAAA;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAkDD;;GAtGQvB,G;;KAAAA,G;AAwGT,eAAeA,GAAf","sourcesContent":["\nimport './App.css';\nimport React, { useEffect, useState } from 'react'\nimport { TaskRow } from './components/TaskRows';\nimport { TaskBanner } from './components/TaskBanner';\nimport { TaskCreator } from './components/TaskCreator';\nimport { VisibilityControl } from './components/VisibilityControl'\nimport { DeleteData } from './components/DeleteData'\n\n\nfunction App() {\n\n  const [userName, setUserName] = useState('Ale');\n\n  const [taskItems, setTaskItems] = useState([\n    { name: '', completed: true }\n\n  ])\n  const [showCompleted, setShowCompleted] = useState(true)\n\n  useEffect(() => {\n    let data = localStorage.getItem(\"tasks\");\n    if (data != null) {\n      setTaskItems(JSON.parse(data));\n    } else {\n      setTaskItems([{}]);\n      setShowCompleted(true);\n    }\n  }, [])\n\n  useEffect(() => {\n    localStorage.setItem('tasks', JSON.stringify(taskItems))\n  }, [taskItems]);\n\n\n\n\n\n\n  const createNewTask = taskName => {\n    if (!taskItems.find(t => t.name === taskName)) {\n      setTaskItems([...taskItems, { name: taskName, completed: false }])\n    }\n  }\n\n  const toggleTask = task =>\n    setTaskItems(taskItems.map(t => (t.name === task.name ? { ...t, completed: !t.completed } : t)))\n\n  const taskTableRows = (completedValue) =>\n    taskItems\n      .filter(task => task.completed === completedValue)\n      .map(task => (\n\n\n        <TaskRow\n          task={task}\n          key={task.name}\n          toggleTask={toggleTask} />\n      ))\n\n\n\n  return (\n    <div className=\"app-main\">\n\n      <TaskCreator callback={createNewTask} />\n      <div>\n        <TaskBanner taskItems={taskItems} />\n        <table className=\"app-main\">\n          <thead>\n            <tr>\n              <th className=\"DescriptionRow\">Tareas</th>\n              <th className=\"HechoRow\">Estado</th>\n            </tr>\n          </thead>\n          <tbody>\n            {taskTableRows(false)}\n          </tbody>\n        </table>\n\n\n\n\n\n        <div className=\"app-main\">\n          <VisibilityControl\n            description=\"Tareas Completas\"\n            isChecked={showCompleted}\n            callback={checked => setShowCompleted(checked)}\n          />\n        </div>\n        {\n          showCompleted && (\n            <table className=\"app-main\">\n              <thead>\n                <tr>\n                  <th className=\"DescriptionRow\">Tareas</th>\n                  <th className=\"HechoRow\">Hecho</th>\n                </tr>\n              </thead>\n              <tbody>\n                {taskTableRows(true)}\n\n              </tbody>\n            </table>\n\n          )\n        }\n        <DeleteData />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}