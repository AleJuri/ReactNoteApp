{"version":3,"sources":["components/TaskRows.js","components/TaskBanner.js","components/TaskCreator.js","components/VisibilityControl.js","components/DeleteData.js","App.js","reportWebVitals.js","index.js"],"names":["TaskRow","props","className","task","name","type","checked","completed","onChange","toggleTask","TaskBanner","taskItems","filter","t","length","TaskCreator","useState","newTaskName","setNewTaskName","createNewTask","callback","onSubmit","id","value","e","target","placeholder","onClick","VisibilityControl","isChecked","description","DeleteData","localStorage","removeItem","window","location","reload","App","setTaskItems","showCompleted","setShowCompleted","useEffect","data","getItem","JSON","parse","setItem","stringify","map","taskTableRows","completedValue","taskName","find","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8a1f54ea.chunk.js","sourcesContent":["import React from 'react'\n\nexport const TaskRow = props => (\n    <div>\n        <tr key={props.task.name}>\n            <td className=\"DescriptionRowNew\">{props.task.name}</td>\n            <td className=\"HechoRowNew\">\n                <input\n                    type=\"checkbox\"\n                    checked={props.task.completed}\n                    onChange={() => props.toggleTask(props.task)}\n                />\n\n            </td>\n        </tr>\n    </div>\n);","import React from 'react'\n\nexport const TaskBanner = props => (\n    <>\n        <div>\n\n            <h5>Quedan {props.taskItems.filter(t => !t.completed).length - 1} tareas por realizar</h5>\n        </div>\n    </>\n)","import React, { useState } from 'react'\n\nexport const TaskCreator = props => {\n\n    const [newTaskName, setNewTaskName] = useState(\"\");\n\n    const updateNewTaskValue = e => setNewTaskName(e.target.value)\n    const createNewTask = () => {\n        props.callback(newTaskName);\n        setNewTaskName(\"\");\n\n\n\n    }\n\n\n    return (\n        <div className=\"app-main\">\n            <div className=\"div-1\">\n                <h1>Agendame React</h1>\n                <form onSubmit={createNewTask}>\n                    <input id=\"task-creator\"\n                        type=\"text\"\n                        value={newTaskName}\n                        onChange={updateNewTaskValue}\n                        placeholder=\"Agrega tu nueva tarea\"\n                    />\n                </form>\n                <button\n                    id=\"boton\"\n                    className=\"btn-create\"\n                    onClick={createNewTask}\n                > Agregar</button>\n            </div>\n        </div>\n    )\n}","import React from 'react'\n\nexport const VisibilityControl = props => {\n    return (\n\n        <div>\n            <input\n                type=\"checkbox\"\n                checked={props.isChecked}\n                onChange={e => props.callback(e.target.checked)}\n            />\n\n            <label>\n                Mostrar {props.description}\n            </label>\n        </div>\n\n\n    )\n}","import React from 'react'\n\n\n\nexport const DeleteData = props => {\n\n    function ResetFunction() {\n        localStorage.removeItem(\"tasks\");\n        window.location.reload();\n\n    }\n\n\n\n\n    return (\n        <div>\n\n            <button className=\"Boton-Borrar\"\n                onClick={ResetFunction}\n            >Borrar Todo</button>\n        </div>\n    )\n}","\nimport './App.css';\nimport React, { useEffect, useState } from 'react'\nimport { TaskRow } from './components/TaskRows';\nimport { TaskBanner } from './components/TaskBanner';\nimport { TaskCreator } from './components/TaskCreator';\nimport { VisibilityControl } from './components/VisibilityControl'\nimport { DeleteData } from './components/DeleteData'\n\n\nfunction App() {\n\n  const [userName, setUserName] = useState('Ale');\n\n  const [taskItems, setTaskItems] = useState([\n    { name: '', completed: true }\n\n  ])\n  const [showCompleted, setShowCompleted] = useState(true)\n\n  useEffect(() => {\n    let data = localStorage.getItem(\"tasks\");\n    if (data != null) {\n      setTaskItems(JSON.parse(data));\n    } else {\n      setTaskItems([{}]);\n      setShowCompleted(true);\n    }\n  }, [])\n\n  useEffect(() => {\n    localStorage.setItem('tasks', JSON.stringify(taskItems))\n  }, [taskItems]);\n\n\n\n\n\n\n  const createNewTask = taskName => {\n    if (!taskItems.find(t => t.name === taskName)) {\n      setTaskItems([...taskItems, { name: taskName, completed: false }])\n    }\n  }\n\n  const toggleTask = task =>\n    setTaskItems(taskItems.map(t => (t.name === task.name ? { ...t, completed: !t.completed } : t)))\n\n  const taskTableRows = (completedValue) =>\n    taskItems\n      .filter(task => task.completed === completedValue)\n      .map(task => (\n\n\n        <TaskRow\n          task={task}\n          key={task.name}\n          toggleTask={toggleTask} />\n      ))\n\n\n\n  return (\n    <div className=\"app-main\">\n\n      <TaskCreator callback={createNewTask} />\n      <div>\n        <div className=\"div-1\">\n        <TaskBanner taskItems={taskItems} />\n        <table>\n          <thead>\n            <tr>\n              <th className=\"DescriptionRow\">Tareas</th>\n              <th className=\"HechoRow\">Estado</th>\n            </tr>\n          </thead>\n          <tbody>\n            {taskTableRows(false)}\n          </tbody>\n        </table>\n\n\n\n\n\n        <div className=\"VisibilityControl\">\n          <VisibilityControl\n            description=\"Tareas Completas\"\n            isChecked={showCompleted}\n            callback={checked => setShowCompleted(checked)}\n          />\n        </div>\n        {\n          showCompleted && (\n            <table>\n              <thead>\n                <tr>\n                  <th className=\"DescriptionRow\">Tareas</th>\n                  <th className=\"HechoRow\">Hecho</th>\n                </tr>\n              </thead>\n              <tbody>\n                {taskTableRows(true)}\n\n              </tbody>\n            </table>\n\n          )\n        }\n        <DeleteData />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}